Talk title:
Moving towards dialogue: talking to your computer with typed holes!

Abstract for your talk:
With most people, their first (and only) experience of static types is being
continually told off by their compiler. With a little gentle encouragement, it
is possible to change this dysfunctional relationship and move past this stage
towards having a conversation with their programming language.

Timeline for your talk:
1 min: Intro
  - I want to write a simple program
  - Given a function and a list, apply the function to each element in the list
    and give me back the result
2 min: Python
  - List comprehensions
  - Is this right? What does that even mean?
  - Tests
  - Nonsensical implementation
  - Python is laissez-faire, doesn't care
  - Confidence that I did the right thing: low
3 min: Haskell
  - Intro to Haskell syntax
  - Our first signature
  - I don't know what the implementation should be, let me put a `_` here
  - GHC tells me what to do!
  - Fill in the holes
  - It works!
  - We still need tests though, demonstrate `map = []` and other nonsense
  - Haskell isn't good enough
  - Confidence that I did the right thing: medium
3 min: Idris
  - Intro to Idris syntax
  - Vectors are length-indexed lists
  - I don't know what the implementation should be, let me put a `?hole` here
  - Demonstrate Idris' editor integration, case splitting
  - Much easier!
  - Confidence that I did the right thing: high
~1 min: Conclusion
  - Try typed holes! Available in Haskell, PureScript, Agda, and Idris

Intended audience:
Anyone who hasn't heard of typed holes!
