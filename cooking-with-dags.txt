Talk title:
Tarjan's Strongly Connected Components Algorithm: Now You're Cooking with DAGs!

Abstract for your talk:

Tarjan's Strongly Connected Components algorithm is my favourite, and one of
Knuth's too! In one fell swoop, it cleaves graphs into smaller parts for
processing and puts these parts in the most convenient order. Most
intriguingly, it manages to do all this in linear time!

In this talk, I'll talk about how this algorithm works and when you might want
to use it, as well as demonstrate by thwacking problems with Git, build tools,
and boolean satisfiability into submission.

Timeline for your talk:
2 min: Drawing a Git repo
  - Suppose I wanted to draw a git repo as a bunch of commits (nodes) with
    links to each other. How would this work?
  - Git commits need to form a directed acyclic graph, enforced by hashes
  - Git commits can't have any cycles, so check for those
  - I want helpful error messages, so I need to point out where any cycles are
    -> SCCs
  - Git hashes include hashes of parents, so hash parents before children
    -> reverse topological sort
2 min: Finding Tarjan's SCC algorithm
  - Ask on StackOverflow -> Look up algorithm on Wikipedia
  - What's a strongly connected component? any subgraph where each node
    connects to every other -> cycles!
  - What's a topological sort? Why do we want a reverse topological sort?
    Because we have children -> parents instead of parents -> children
  - SCCs and reverse topological sorting in linear time!
3 min: Seeing it in action
  - Walk through the counterexample from the Wikipedia page
  - Walk through a DAG
3 min: Other applications
  - Build tools/data flow systems
  - Boolean satisfiability (2SAT)
  - Any possibly-DAG you have to process!

Intended audience:
Anyone who has ever had to tame unruly vertices and edges!
